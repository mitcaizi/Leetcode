Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Example 2:
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        int[] res = new int[numCourses];
        int j = 0;
        Map<Integer, List<Integer>>map = new HashMap<>();
        for(int i = 0; i < prerequisites.length; i++){
            if(map.containsKey(prerequisites[i][1])){
                map.get(prerequisites[i][1]).add(prerequisites[i][0]);
            }else{
                List<Integer> list = new ArrayList<>();
                list.add(prerequisites[i][0]);
                map.put(prerequisites[i][1], list);
            }
            indegree[prerequisites[i][0]]++;
        }
        //BFS
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i< indegree.length; i++){
            if(indegree[i] ==0){
                queue.offer(i);
            }
        }
        int count = 0;
        while(!queue.isEmpty()){
            int course = queue.poll();
            count++;
            res[j]= course;
            j++;
            List<Integer> list = map.get(course);
            if(list!= null){
                int n = list.size();
                for(int i = 0; i< n; i++){
                    int subcourse = map.get(course).get(i);
                    indegree[subcourse]--;
                    if(indegree[subcourse] == 0){
                        queue.offer(subcourse);
                    }
                }
            }
        }
        if(count == numCourses) return res;
        else return new int[0];
    }
}
